#!/usr/bin/env node

import { createCommand } from "commander"
import { readFileSync } from "fs"
import { dirname } from "path"
import { fileURLToPath } from "url"
import { setup, auth, contribute, observe, finalize, clean, logout } from "./commands/index.js"

// Get pkg info (e.g., name, version).
const packagePath = `${dirname(fileURLToPath(import.meta.url))}/..`
const { description, version, name } = JSON.parse(readFileSync(`${packagePath}/package.json`, "utf8"))
const program = createCommand()

// Entry point.
program.name(name).description(description).version(version)

// User commands.
program.command("auth").description("authenticate yourself using your Github account (OAuth 2.0)").action(auth)
program
    .command("contribute")
    .description("compute contributions for a Phase2 Trusted Setup ceremony circuits")
    .option("-c, --ceremony <string>", "the prefix of the ceremony you want to contribute for", "")
    .option("-e, --entropy <string>", "the entropy (aka toxic waste) of your contribution", "")
    .action(contribute)
program
    .command("clean")
    .description("clean up output generated by commands from the current working directory")
    .action(clean)
program
    .command("logout")
    .description("sign out from Firebae Auth service and delete Github OAuth 2.0 token from local storage")
    .action(logout)

// Only coordinator commands.
const ceremony = program.command("coordinate").description("commands for coordinating a ceremony")

ceremony
    .command("setup")
    .description("setup a Groth16 Phase 2 Trusted Setup ceremony for zk-SNARK circuits")
    .option('-t, --template <path>', 'The path to the ceremony setup template', '')
    .action(setup)
    
ceremony
    .command("observe")
    .description("observe in real-time the waiting queue of each ceremony circuit")
    .action(observe)

ceremony
    .command("finalize")
    .description(
        "finalize a Phase2 Trusted Setup ceremony by applying a beacon, exporting verification key and verifier contract"
    )
    .action(finalize)

program.parseAsync(process.argv)
